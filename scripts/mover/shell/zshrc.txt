# Mostrar banner personalizado con figlet y lolcat
if command -v figlet &> /dev/null && command -v lolcat &> /dev/null; then
    figlet -f slant "JiAyiX" -c | lolcat
else
    echo "JiAyiX"
fi

# Crear archivo Víctima en caso de no existir
init_target_file() {
  local file="/tmp/targer_ip"  
  if [ ! -f "$file" ]; then
    touch "$file"
  fi
}

# Se comprueba cada vez que inicie sesión
init_target_file



# Tema zsh
zsh_theme=""
	PROMPT='
%B%F{magenta}┌─%f%F{magenta}[%f%F{red}($(whoami))%f%bRed: %F{green}$(get_ip_address)%f%B%F{magenta}]%f%b %B%F{magenta}[%b%fRuta: %F{4}%~%f%B%F{magenta}]%f%b%f
%B%F{magenta}└─➜%b%f '

RPROMPT='[%B$(get_victim_ip)%b]'

get_ip_address() {
  # VPN: interfaz tun0
  if ip addr show tun0 2>/dev/null | grep -q 'inet '; then
    local ip=$(ip addr show tun0 | awk '/inet / {print $2}' | cut -d/ -f1)
    echo "%{$fg[green]%}${ip}(VPN)%{$reset_color%}"
  # Ethernet: interfaz eth0
  elif ip addr show eth0 2>/dev/null | grep -q 'inet '; then
    local ip=$(ip addr show eth0 | awk '/inet / {print $2}' | cut -d/ -f1)
    echo "%{$fg[green]%}${ip}(Cable)%{$reset_color%}"
  # Wi-Fi: interfaz wlan0
  elif ip addr show wlan0 2>/dev/null | grep -q 'inet '; then
    local ip=$(ip addr show wlan0 | awk '/inet / {print $2}' | cut -d/ -f1)
    echo "%{$fg[green]%}${ip}(Wi-Fi)%{$reset_color%}"
  # Wi-Fi alternativa: interfaz wlp3s0
  elif ip addr show wlp3s0 2>/dev/null | grep -q 'inet '; then
    local ip=$(ip addr show wlp3s0 | awk '/inet / {print $2}' | cut -d/ -f1)
    echo "%{$fg[green]%}${ip}(Wi-Fi)%{$reset_color%}"
  # Adaptador puente de VirtualBox: interfaz enp0s3
  elif ip addr show enp0s3 2>/dev/null | grep -q 'inet '; then
    local ip=$(ip addr show enp0s3 | awk '/inet / {print $2}' | cut -d/ -f1)
    echo "%{$fg[green]%}${ip}(Virtual)%{$reset_color%}"
  # Otra configuración de VirtualBox: interfaz enp0s8
  elif ip addr show enp0s8 2>/dev/null | grep -q 'inet '; then
    local ip=$(ip addr show enp0s8 | awk '/inet / {print $2}' | cut -d/ -f1)
    echo "%{$fg[green]%}${ip}(Virtual)%{$reset_color%}"
  # Otra posible NAT de VirtualBox: interfaz enp0s9
  elif ip addr show enp0s9 2>/dev/null | grep -q 'inet '; then
    local ip=$(ip addr show enp0s9 | awk '/inet / {print $2}' | cut -d/ -f1)
    echo "%{$fg[green]%}${ip}(Virtual)%{$reset_color%}"
  else
    echo "%{$fg[red]%}No IP%{$reset_color%}"
  fi
}

# Mostrat IP Víctima
get_victim_ip() {
  local file="/tmp/target_ip"
  if [ -f "$file" ]; then
    local ip
    ip=$(cat "$file")
    if [ -n "$ip" ]; then
      echo "%{$fg[red]%}${ip}%{$reset_color%}"
    else
      echo "%{$fg[red]%}No Victim%{$reset_color%}"
    fi
  else
    echo "%{$fg[red]%}No Victim%{$reset_color%}"
  fi
}

# Crear IP Víctima
target() {
  if [ "$#" -ne 1 ]; then
    echo "Uso: target <IP>"
    return 1
  fi
  local file="/tmp/target_ip"
  echo "$1" > "$file"
  echo "Ip Víctima es: $1"
}

# Borrar IP víctima
ctarget() {
  local file="/tmp/target_ip"
  echo "" > "$file"
  echo "Se borro la Ip Víctima"
}

# Si no existe te da sugerencia
command_not_found_handler() {
    # La ruta puede variar. Suele estar en /usr/lib/command-not-found
    if [ -x /usr/lib/command-not-found ]; then
        /usr/lib/command-not-found "$1"
    else
        echo "zsh: comando no encontrado: $1"
    fi
    return 127
}


# Ruta de Instalación de Oh-My-Zsh
export ZSH="$HOME/.oh-my-zsh"


# Autocompletado mayúscula/minúscula
CASE_SENSITIVE="true" 


# Actualización automática de oh my zsh.
# zstyle ':omz:update' mode disabled  # desactivado.
zstyle ':omz:update' mode auto      # actualizar automáticamente.
# zstyle ':omz:update' mode reminder  # muestra recordatorio cuando hay actualización.


# Auto actualizar el oh my zsh en X dias
# zstyle ':omz:update' frequency 13


# Desactiva las funciones avanzadas de Zsh, optimizando el rendimiento.
# DISABLE_MAGIC_FUNCTIONS="true"


# ls sin colores
# DISABLE_LS_COLORS="true"


# Evita que el título de la terminal cambie automáticamente.
# DISABLE_AUTO_TITLE="true"


# Activa la corrección automática de comandos mal escritos.
ENABLE_CORRECTION="true"


# Muestra puntos rojos (o personalizables) mientras se espera una finalización.
COMPLETION_WAITING_DOTS="true" 


# Es recomendable si trabajas en repositorios de git grandes.
# DISABLE_UNTRACKED_FILES_DIRTY="true"


# Formato de fecha en el historial de comandos de zsh.
# "mm/dd/yyyy" | "yyyy-mm-dd" | "dd.mm.yyyy"
HIST_STAMPS="dd.mm.yyyy" 


# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder


# Plugins
plugins=(#git 
	 zsh-syntax-highlighting 
	 zsh-autosuggestions
	 z
	 colored-man-pages	
	 sudo
	 docker
	 history-substring-search
	 alias-finder)

source $ZSH/oh-my-zsh.sh


# Lenguaje
export LANG=es_ES.UTF-8
export LANGUAGE=es_ES


# editor preferido en remoto
if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='nano'
else
   export EDITOR='vi'
fi


# Configuración Autocompletado
autoload -Uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'


# History configurations
HISTFILE=~/.zsh_history
HISTSIZE=999999
SAVEHIST=999999

# limpiar el historial cada mes
clean_history() {
  # Mantén solo los comandos de los últimos 30 días
  awk -v d="$(date -d '30 days ago' +%s)" -F ';' \
    '$1 >= d || $1 !~ /^[0-9]+$/' "$HISTFILE" > "$HISTFILE.tmp" && mv "$HISTFILE.tmp" "$HISTFILE"
}

# Ejecutar la limpieza al inicio de cada sesión
clean_history


# listar
alias ll='exa -lhgHaF --colour=always --icons --group-directories-first'
alias l='exa -lhgHF --colour=always --icons --group-directories-first'
alias lt='exa --long --tree --colour=always --icons --group-directories-first'

# mirar
alias c='batcat --paging=never'

# basicos
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto -in'
alias publica='curl ifconfig.co'
alias install='sudo apt install -y'
alias actualizar='sudo apt update && sudo apt full-upgrade -y && sudo apt autoremove -y'
alias mk='sudo mkdir -pv'
alias rm='sudo rm -dfriv'
alias mv='sudo mv -v'

#comprimir
alias comprimir='tar -cfv'
alias descomprimir='tar -xfv'

# permisos
alias chown='sudo chown'
alias chmod='sudo chmod'

# mover
alias ini='cd ~'
alias .='cd ..'
alias ..='cd -'

# sistema
alias reiniciar='shutdown -r 0'
alias apagar='shutdown now'
alias so='neofetch | lolcat'
alias particiones='sudo fdisk -l'

#otros
alias t='tree -L 2'
alias jy='figlet -f slant "JiAyiX" -c | lolcat'
alias tamaño='ncdu'

#seguridad
alias escaneo='sudo freshclam && sudo clamscan -r --bell  --move=/var/tmp'
alias puertos='ss -tulnp'


# Funciones
function mkt(){
	mkdir {nmap,content,exploits,scripts}
}

# Extract nmap information
function extractPorts(){
	ports="$(cat $1 | grep -oP '\d{1,5}/open' | awk '{print $1}' FS='/' | xargs | tr ' ' ',')"
	ip_address="$(cat $1 | grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | sort -u | head -n 1)"
	echo -e "\n[*] Extracting information...\n" > extractPorts.tmp
	echo -e "\t[*] IP Address: $ip_address"  >> extractPorts.tmp
	echo -e "\t[*] Open ports: $ports\n"  >> extractPorts.tmp
	echo $ports | tr -d '\n' | xclip -sel clip
	echo -e "[*] Ports copied to clipboard\n"  >> extractPorts.tmp
	cat extractPorts.tmp; rm extractPorts.tmp
}

# Settarget
function settarget(){
        if [ $# -eq 1 ]; then
        	echo $1 > ~/.config/polybar/shapes/scripts/target
        elif [ $# -gt 2 ]; then
        	echo "settarget [IP] [NAME] | settarget [IP]"
        else
        	echo $1 $2 > ~/.config/polybar/shapes/scripts/target
        fi
}

# fzf improvement
function fzf-lovely(){

	if [ "$1" = "h" ]; then
		fzf -m --reverse --preview-window down:20 --preview '[[ $(file --mime {}) =~ binary ]] &&
 	                echo {} is a binary file ||
	                 (batcat --style=numbers --color=always {} ||
	                  highlight -O ansi -l {} ||
	                  coderay {} ||
	                  rougify {} ||
	                  cat {}) 2> /dev/null | head -500'

	else
	        fzf -m --preview '[[ $(file --mime {}) =~ binary ]] &&
	                         echo {} is a binary file ||
	                         (batcat --style=numbers --color=always {} ||
	                          highlight -O ansi -l {} ||
	                          coderay {} ||
	                          rougify {} ||
	                          cat {}) 2> /dev/null | head -500'
	fi
}

function rmk(){
	scrub -p dod $1
	shred -zun 10 -v $1
}
